"""
Snakemake pipeline for processing RNase footprinting data.

This script allows the user to process raw sequencing reads in the FASTQ format into gene counts for ribosome footprinting data. By using snakemake, the results of this analysis are highly reproducible, easily regenerated if needed, and make the analysis of large numbers of samples very straightforward.

For this script to work as written, it is required that the samples be organized into directories following the pattern "<SPECIES>/<SAMPLENAME>-rfp/" and with the input read file named "r.1.fastq.gz". The reference and annotation files must also be in a directory called "<SPECIES>/annotation/". The required modules and python packages are listed below. 

Required packages:
- python/anaconda3
- bowtie2/2.2.6
- tophat/2.1.0
- deeptools/3.1.1
- samtools/1.6
- htseq
- R/3.6.3
- RibORF.1.0 (https://github.com/zhejilab/RibORF)

Required python packages:
- snakemake
- pysam
- numpy
- matplotlib

Required reference files:
- bowtie2 rRNA alignment reference = "<SPECIES>/annotation/rRNA_bowtie2/rRNA"
- bowtie2 genomic alignment referece = "<SPECIES>/annotation/genome_bowtie2/genome"
- tophat transcriptome reference = "<SPECIES>/annotation/transcriptome_gtf/known"
- FASTA file of the primary genome assembly for RibORF = "<SPECIES>/annotation/primary_assembly.genome.fa"
- Transcriptome annotation file in GenePred format for RibORF = "<SPECIES>/annotation/gencode.v38.annotation.genePred"

After loading an Anaconda distribution of python and installing the snakemake package, this script can be run locally or be used to launch slurm jobs using the following commands. If the script is used to launch slurm jobs, a file called "cluster_config.yml" is required to specify parameters required to launch the jobs, such as the account, partition, time, etc.

Individual steps can be run by indicating the desired output file. For example, replacing "<SPECIES>/<SAMPLENAME>-rfp/riborf/riborf/repre.valid.ORF.genepred.txt" with "<SPECIES>/<SAMPLENAME>-rfp/align_transcriptome_tophat/accepted_hits.bam" in the command line will run the Tophat transcriptome alignment step. 

"""

rule trimming:
	"""Removes adapters from input reads using the Cutadapt tool and performs read filtering based on length.
	"""
	input:
		reads = "{species}/{sample}-{platform}/r.1.fastq.gz",
	output:
		fastq = "{species}/{sample}-{platform}/r.1.trimmed.fastq.gz",
	log:
		"{species}/{sample}-{platform}/logs/cutadapt.log",
	shell:
		"cutadapt -a AAAAAAAAAA -e 0.1 -u 7 -m 18 -M 35 -o {output.fastq} {input.reads} > {log}"

rule align_rRNA_bowtie:
	"""Aligns trimmed reads to ribosomal RNA reference sequences using Bowtie2 and outputs rRNA-unmapped reads for downstream use.
	"""
	input:
		reads = "{species}/{sample}-{platform}/r.1.trimmed.fastq.gz",
	output:
		outdir = "{species}/{sample}-{platform}/align_rRNA_bowtie/",
		reads = "{species}/{sample}-{platform}/align_rRNA_bowtie/unmapped.fastq",
		sam = "{species}/{sample}-{platform}/align_rRNA_bowtie/accepted_hits.sam",
		log = "{species}/{sample}-{platform}/logs/align_rRNA_bowtie.log",
	params:
		refdir = "{species}/annotation/rRNA_bowtie2/rRNA",
		threads = 8,
	shell:
		"module load bowtie2/2.2.6; "
		"bowtie2 "
		"-p {params.threads} "
		"-x {params.refdir} "
		"-U {input.reads} "
		"--un {output.reads} "
		"-S {output.sam} 2> {output.log} "



rule align_transcriptome_tophat:
	"""Aligns rRNA-unmapped reads to the transcriptome then genome using Tophat.
	"""
	input:
		reads = "{species}/{sample}-{platform}/align_rRNA_bowtie/unmapped.fastq",
	output:
		outdir = "{species}/{sample}-{platform}/align_transcriptome_tophat/",
		reads = "{species}/{sample}-{platform}/align_transcriptome_tophat/accepted_hits.bam"
	log:
		"{species}/{sample}-{platform}/logs/align_transcriptome_tophat.log",
	params:
		refdir = "{species}/annotation/genome_bowtie2/genome",
		gtfdir = "{species}/annotation/transcriptome_gtf/known",
		threads = 8,
	shell:
		"module load python/anaconda; module load bowtie2/2.2.6; module load tophat/2.1.0; "
		"tophat "
		"-p {params.threads} "
		"--transcriptome-index={params.gtfdir} "
		"-o {output.outdir} "
		"{params.refdir} "
		"{input.reads} &> {log} "



rule tracks_transcriptome_tophat:
	"""Creates BigWig tracks showing the genome coverage of uniquely-mapped reads for viewing and quality checking.
	"""
	input:
		bam = "{species}/{sample}-{platform}/align_transcriptome_tophat/accepted_hits.bam",
	output:
		unique_sam = "{species}/{sample}-{platform}/align_transcriptome_tophat/unique_hits.sam",
		unique_bam = "{species}/{sample}-{platform}/align_transcriptome_tophat/unique_hits.bam",
		bw1 = "{species}/{sample}-{platform}/align_transcriptome_tophat/unique_hits.str1.bw",
		bw2 = "{species}/{sample}-{platform}/align_transcriptome_tophat/unique_hits.str2.bw",
	params:
		threads = 8,
	shell:
		"module purge all; module load deeptools/3.1.1; module load samtools/1.6; "
		"samtools view -H {input.bam} > {output.unique_sam}; "
		"samtools view {input.bam} | grep \"NH:i:1\" >> {output.unique_sam}; "
		"samtools view -S -b {output.unique_sam} | samtools sort -o {output.unique_bam}; "
		"samtools index {output.unique_bam}; "
		"bamCoverage -p {params.threads} -b {output.unique_bam} -o {output.bw1} --filterRNAstrand reverse --normalizeUsing CPM --binSize 1; "
		"bamCoverage -p {params.threads} -b {output.unique_bam} -o {output.bw2} --filterRNAstrand forward --normalizeUsing CPM --binSize 1; "


rule counts_transcriptome:
	"""Quantifies uniquely-mapped reads in known transcripts using HT-Seq.
	"""
	input:
		bam = "{species}/{sample}-{platform}/align_transcriptome_tophat/unique_hits.bam",
		gff = "{species}/annotation/transcriptome_gtf/known.gff",
	output:
		counts = "{species}/{sample}-{platform}/align_transcriptome_tophat/unique_hits.counts.txt",
	params:
		stranded = "yes",
		type = "CDS",
		mode = "union",
	shell:
		"htseq-count "
		"-f bam "
		"-s {params.stranded} "
		"-t {params.type} "
		"-m {params.mode} "
		"{input.bam} {input.gff} > {output.counts} "


rule riborf_annotate:
	"""Annotates the reference genome annotation and primary assembly to identify candidate ORFs, first step of RibORF analysis.
	"""
	input:
		riborf_annotate = "software/RibORF.2.0/ORFannotate.pl",
	output:
		outdir = "{species}/{sample}-{platform}/riborf/annotate",
		outfile = "{species}/{sample}-{platform}/riborf/annotate/candidateORF.genepred.txt"
	params:
		genome_fa = "{species}/annotation/primary_assembly.genome.fa",
		genepred = "{species}/annotation/gencode.v38.annotation.genePred", 
	shell:
		"mkdir -p {output.outdir}; "
		"perl {input.riborf_annotate} -g {params.genome_fa} -t {params.genepred} -o {output.outdir}; "



rule riborf_readdist:
	"""Quality control analyses and plot the distribution of reads surrounding the start and stop codons by read length, second step of RibORF analysis. The high quality data should show strong read enrichment in coding regions compared to 3'UTRs. The codng regions reads are enriched with lengths of ~21nt and ~29nt with 3-nt periodicity. 
	"""
	input:
		bam = "{species}/{sample}-{platform}/align_transcriptome_tophat/accepted_hits.bam",
		riborf_readdist = "software/RibORF.2.0/readDist.pl",
		riborf_plot = "software/RibORF.2.0/combine_plots.R",
	output:
		sam = "{species}/{sample}-{platform}/align_transcriptome_tophat/accepted_hits.sam",
		outdir = "{species}/{sample}-{platform}/riborf/readdist",
		outplot = "{species}/{sample}-{platform}/riborf/readdist/plot.readDist.pdf"
	params:
		genepred = "{species}/annotation/gencode.v38.annotation.genePred", 
		fragments = "18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,",
	shell:
		"module load samtools/1.6; module load R/3.6.3; "
		"mkdir -p {output.outdir}; "
		"samtools view -h -o {output.sam} {input.bam}; "
		#"perl {input.riborf_readdist} -f {output.sam} -g {params.genepred} -o {output.outdir} -d {params.fragments}; "
		"Rscript --vanilla {input.riborf_plot} {output.outdir} {params.fragments}; "



rule riborf_correct:
	"""Corrects the location of reads based on their read length and the provided offset parameter file that needs to be manually curated beforehand, third step of RibORF analysis.
	"""
	input:
		sam = "{species}/{sample}-{platform}/align_transcriptome_tophat/accepted_hits.sam",
		riborf_correct = "software/RibORF.2.0/offsetCorrect.pl",
		riborf_readdist = "software/RibORF.2.0/readDist.pl",
		riborf_plot = "software/RibORF.2.0/combine_plots.R",
	output:
		corrected = "{species}/{sample}-{platform}/riborf/corrected/corrected_hits.sam",
		outdir = "{species}/{sample}-{platform}/riborf/corrected",
		outplot = "{species}/{sample}-{platform}/riborf/corrected/plot.readDist.pdf"
	params:
		genepred = "{species}/annotation/gencode.v38.annotation.genePred", 
		offset = "{species}/{sample}-{platform}/riborf/offset.correction.parameters.txt",
		fragments = "1"
	shell:
		"module load R/3.6.3; "
		"mkdir -p {output.outdir}; "
		"perl {input.riborf_correct} -r {input.sam} -p {params.offset} -o {output.corrected}; "
		"perl {input.riborf_readdist} -f {output.corrected} -g {params.genepred} -o {output.outdir} -d {params.fragments}; "
		"Rscript --vanilla {input.riborf_plot} {output.outdir} {params.fragments}; "



rule riborf_riborf:
	"""Identifies translated ORFs using the corrected ribosome profiling reads and the candidate ORF file from earlier steps, final step of RibORF analysis.
	"""
	input:
		sam = "{species}/{sample}-{platform}/riborf/corrected/corrected_hits.sam",
		candidate = "{species}/{sample}-{platform}/riborf/annotate/candidateORF.genepred.txt",
		riborf_riborf = "software/RibORF.2.0/ribORF.pl",
	output:
		outdir = "{species}/{sample}-{platform}/riborf/riborf",
		outfile = "{species}/{sample}-{platform}/riborf/riborf/repre.valid.ORF.genepred.txt",
	params:
		orfLengthCutoff = 6,
		orfReadCutoff = 11,
		predictPvalueCutoff = 0.7,
	shell:
		"module load R/3.6.3; "
		"mkdir -p {output.outdir}; "
		"perl {input.riborf_riborf} -f {input.sam} -c {input.candidate} -o {output.outdir} -l {params.orfLengthCutoff} -r {params.orfReadCutoff} -p {params.predictPvalueCutoff}; "









